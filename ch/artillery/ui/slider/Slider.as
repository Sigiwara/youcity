////////////////////////////////////////////////////////////////////////////  Slider////  Created by Benjamin Wiederkehr on 081118.//  Copyright (c) 2008 Benjamin Wiederkehr / Artillery.ch. All rights reserved.////////////////////////////////////////////////////////////////////////////package ch.artillery.ui.slider{	//--------------------------------------	// IMPORT	//--------------------------------------	import flash.events.*;	import flash.display.Sprite;	import flash.geom.ColorTransform;	/**	 *	Standalone scrollbar consisting of a track and a grip.	 *	Dispatching an event with the amount of the grips actual position	 *	or a specific section the track was divided in	 *	 *	@langversion		ActionScript 3.0	 *	@playerversion	Flash 9.0	 *	@author					Benjamin Wiederkehr	 *	@since					081118	 *	@version				0.1	 */	public class Slider extends Sprite{		//--------------------------------------		//  Variables		//--------------------------------------		private var sliderSize	:uint;		private var gripSize		:uint;		private var sCount			:uint;		private var sections		:Array;		private var track				:Sprite;		private var grip				:Sprite;		private var yOffset			:Number;		private var yMin				:Number;		private var yMax				:Number;		private var amount			:Number;		//--------------------------------------		// CONSTANTS		//--------------------------------------		// Width of the scrollbar		private static const BAR_WIDTH			= 20;		// Color of the track		private static const TRACK_COLOR		= 0xDDDDDD;		// Color of the grip		private static const GRIP_COLOR			= 0xAAAAAA;		//--------------------------------------		//  CONSTRUCTOR		//--------------------------------------		/**		*	@param	_sliderSize	:Size the slider		*	@param	_sections		:Amount of sections to divert the slider		*/		public function Slider(_sliderSize:uint, _sCount:* = false):void{			//  DEFINITIONS			//--------------------------------------			sliderSize	= _sliderSize;			sCount			= _sCount;			gripSize		= BAR_WIDTH;			sections		= new Array();			track				= new Sprite();			grip				= new Sprite();			yOffset			= 0;			yMin				= 0;			yMax				= sliderSize - gripSize;			//  ADD			//--------------------------------------			this.addChild(track);			this.addChild(grip);			//  LISTENERS			//--------------------------------------			grip.addEventListener(MouseEvent.MOUSE_OVER, gripOver);			grip.addEventListener(MouseEvent.MOUSE_OUT, gripOut);			grip.addEventListener(MouseEvent.MOUSE_DOWN, gripDown);			//  CALLS			//--------------------------------------			setSections();			drawAssets();		} // END Slider()		//--------------------------------------		//  PRIVATE METHODS		//--------------------------------------		private function drawAssets():void{			drawTrack();			drawGrip();		} // END drawAssets()		private function drawTrack():void{			track.graphics.beginFill(TRACK_COLOR, 1);			track.graphics.drawRect(0, 0, BAR_WIDTH, sliderSize);			track.graphics.endFill();		} // END drawTrack()		private function drawGrip():void{			grip.graphics.beginFill(GRIP_COLOR, 1);			grip.graphics.drawRect(0, 0, BAR_WIDTH, gripSize);			grip.graphics.endFill();			grip.buttonMode = true;		} // END drawGrip()		private function setSections():void{			if(sCount){				var div:Number = 1/sCount;				for (var i:uint = 0; i<sCount; i++){					var tSection:Object = new Object;					tSection.min = div*i;					tSection.max = div*(i+1);					sections.push(tSection);				};			};		} // END setSections()		private function checkSection():uint{			for (var i:int = 0; i<sections.length; i++){				if(amount >= sections[i].min && amount <= sections[i].max){					return i+1;				};			};			return amount;		} // END checkSections()		//--------------------------------------		//  EVENT HANDLERS		//--------------------------------------		private function gripOver(_e:MouseEvent):void{			grip.transform.colorTransform = new ColorTransform(1,1,1,1,-50,-50,-50,255);		} // END gripOver()		private function gripOut(_e:MouseEvent):void{			grip.transform.colorTransform = new ColorTransform(1,1,1,1,0,0,0,255);		} // END gripOut()		private function gripDown(_e:MouseEvent):void{			// To adjust grip position while dragging			this.stage.addEventListener(MouseEvent.MOUSE_MOVE, gripMove);			// To catch if the grip gets released outside of the track			this.stage.addEventListener(MouseEvent.MOUSE_UP, gripUp);			// To prevent the grip to switch color while dragging			grip.removeEventListener(MouseEvent.MOUSE_OUT, gripOut);			// To prevent grip to jump to the mouse position			yOffset = mouseY - grip.y;		} // END gripDown()		private function gripUp(_e:MouseEvent):void{			// To switch color when the mouse isn't over the grip anymore			grip.addEventListener(MouseEvent.MOUSE_OUT, gripOut);			// To stop the moving of the grip			this.stage.removeEventListener(MouseEvent.MOUSE_MOVE, gripMove);			// To stop listening for the up event			this.stage.removeEventListener(MouseEvent.MOUSE_UP, gripUp);			if(sCount){				dispatchEvent(new SliderEvent(SliderEvent.GRIP_UP, checkSection()));			}else{				dispatchEvent(new SliderEvent(SliderEvent.GRIP_UP, amount));			};			gripOut(_e);		} // END gripUp()		private function gripMove(_e:MouseEvent):void{			grip.y		= mouseY - yOffset;			if(grip.y	<= yMin){				grip.y	= yMin;			};			if(grip.y	>= yMax){				grip.y	= yMax;			};			amount = grip.y / yMax;			dispatchEvent(new SliderEvent(SliderEvent.GRIP_MOVE, amount));			_e.updateAfterEvent();		} // END gripMove()	} // END Slider Class} // END package ch.artillery.ui.slider